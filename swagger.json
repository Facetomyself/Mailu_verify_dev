{"swagger": "2.0", "basePath": "/api/v1", "paths": {"/alias": {"post": {"responses": {"409": {"description": "Duplicate alias", "schema": {"$ref": "#/definitions/Response"}}, "404": {"description": "Not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Response"}}}, "summary": "Create a new alias", "operationId": "create_alias", "parameters": [{"name": "payload", "required": true, "in": "body", "schema": {"$ref": "#/definitions/Alias"}}], "security": [{"Bearer": []}], "tags": ["alias"]}, "get": {"responses": {"401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "200": {"description": "Success", "schema": {"type": "array", "items": {"$ref": "#/definitions/Alias"}}}}, "summary": "List all aliases", "operationId": "list_alias", "security": [{"Bearer": []}], "tags": ["alias"]}}, "/alias/destination/{domain}": {"parameters": [{"name": "domain", "in": "path", "required": true, "type": "string"}], "get": {"responses": {"404": {"description": "Alias or domain not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Alias"}}}, "summary": "Look up the aliases of the specified domain", "operationId": "find_alias_filter_domain", "security": [{"Bearer": []}], "tags": ["alias"]}}, "/alias/{alias}": {"parameters": [{"name": "alias", "in": "path", "required": true, "type": "string"}], "delete": {"responses": {"404": {"description": "Alias not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Response"}}}, "summary": "Delete the specified alias", "operationId": "delete_alias", "security": [{"Bearer": []}], "tags": ["alias"]}, "patch": {"responses": {"400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "404": {"description": "Alias not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Response"}}}, "summary": "Update the specfied alias", "operationId": "update_alias", "parameters": [{"name": "payload", "required": true, "in": "body", "schema": {"$ref": "#/definitions/AliasUpdate"}}], "security": [{"Bearer": []}], "tags": ["alias"]}, "get": {"responses": {"404": {"description": "Alias not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Alias"}}}, "summary": "Look up the specified alias", "operationId": "find_alias", "security": [{"Bearer": []}], "tags": ["alias"]}}, "/alternative": {"post": {"responses": {"409": {"description": "Duplicate alternative domain name", "schema": {"$ref": "#/definitions/Response"}}, "404": {"description": "Domain not found or missing", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Response"}}}, "summary": "Create a new alternative (for domain)", "operationId": "create_alternative", "parameters": [{"name": "payload", "required": true, "in": "body", "schema": {"$ref": "#/definitions/AlternativeDomain"}}], "security": [{"Bearer": []}], "tags": ["alternative"]}, "get": {"responses": {"401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "200": {"description": "Success", "schema": {"type": "array", "items": {"$ref": "#/definitions/AlternativeDomain"}}}}, "summary": "List all alternatives", "operationId": "list_alternative", "security": [{"Bearer": []}], "tags": ["alternative"]}}, "/alternative/{alt}": {"parameters": [{"name": "alt", "in": "path", "required": true, "type": "string"}], "delete": {"responses": {"409": {"description": "Duplicate domain name", "schema": {"$ref": "#/definitions/Response"}}, "404": {"description": "Alternative/Domain not found or missing", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Response"}}}, "summary": "Delete the specified alternative (for domain)", "operationId": "delete_alternative", "security": [{"Bearer": []}], "tags": ["alternative"]}, "get": {"responses": {"404": {"description": "Alternative not found or missing", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/AlternativeDomain"}}}, "summary": "Look up the specified alternative (of domain)", "operationId": "find_alternative", "security": [{"Bearer": []}], "tags": ["alternative"]}}, "/domain": {"post": {"responses": {"409": {"description": "Duplicate domain/alternative name", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Response"}}}, "summary": "Create a new domain", "operationId": "create_domain", "parameters": [{"name": "payload", "required": true, "in": "body", "schema": {"$ref": "#/definitions/Domain"}}], "security": [{"Bearer": []}], "tags": ["domain"]}, "get": {"responses": {"401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "200": {"description": "Success", "schema": {"type": "array", "items": {"$ref": "#/definitions/DomainGet"}}}}, "summary": "List all domains", "operationId": "list_domain", "security": [{"Bearer": []}], "tags": ["domain"]}}, "/domain/{domain}": {"parameters": [{"name": "domain", "in": "path", "required": true, "type": "string"}], "delete": {"responses": {"404": {"description": "Domain not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Response"}}}, "summary": "Delete the specified domain", "operationId": "delete_domain", "security": [{"Bearer": []}], "tags": ["domain"]}, "patch": {"responses": {"409": {"description": "Duplicate domain/alternative name", "schema": {"$ref": "#/definitions/Response"}}, "404": {"description": "Domain not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Response"}}}, "summary": "Update the specified domain", "operationId": "update_domain", "parameters": [{"name": "payload", "required": true, "in": "body", "schema": {"$ref": "#/definitions/DomainUpdate"}}], "security": [{"Bearer": []}], "tags": ["domain"]}, "get": {"responses": {"404": {"description": "Domain not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/DomainGet"}}}, "summary": "Look up the specified domain", "operationId": "find_domain", "security": [{"Bearer": []}], "tags": ["domain"]}}, "/domain/{domain}/dkim": {"parameters": [{"name": "domain", "in": "path", "required": true, "type": "string"}], "post": {"responses": {"404": {"description": "Domain not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Response"}}}, "summary": "Generate new DKIM/DMARC keys for the specified domain", "operationId": "generate_dkim", "security": [{"Bearer": []}], "tags": ["domain"]}}, "/domain/{domain}/manager": {"parameters": [{"name": "domain", "in": "path", "required": true, "type": "string"}], "post": {"responses": {"409": {"description": "Duplicate domain manager", "schema": {"$ref": "#/definitions/Response"}}, "404": {"description": "User or domain not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Response"}}}, "summary": "Create a new domain manager for the specified domain", "operationId": "create_manager", "parameters": [{"name": "payload", "required": true, "in": "body", "schema": {"$ref": "#/definitions/ManagerCreate"}}], "security": [{"Bearer": []}], "tags": ["domain"]}, "get": {"responses": {"404": {"description": "domain not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Manager"}}}, "summary": "List all managers of the specified domain", "operationId": "list_managers", "security": [{"Bearer": []}], "tags": ["domain"]}}, "/domain/{domain}/manager/{email}": {"parameters": [{"name": "domain", "in": "path", "required": true, "type": "string"}, {"name": "email", "in": "path", "required": true, "type": "string"}], "delete": {"responses": {"404": {"description": "Manager not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Response"}}}, "summary": "Delete the specified manager of the specified domain", "operationId": "delete_manager", "security": [{"Bearer": []}], "tags": ["domain"]}, "get": {"responses": {"404": {"description": "Manager not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Response"}}}, "summary": "Check if the specified user is a manager of the specified domain", "operationId": "find_manager", "security": [{"Bearer": []}], "tags": ["domain"]}}, "/domain/{domain}/users": {"parameters": [{"name": "domain", "in": "path", "required": true, "type": "string"}], "get": {"responses": {"404": {"description": "Domain not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/UserGet"}}}, "summary": "List all the users from the specified domain", "operationId": "list_user_domain", "security": [{"Bearer": []}], "tags": ["domain"]}}, "/relay": {"post": {"responses": {"409": {"description": "Duplicate relay", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Response"}}}, "summary": "Create a new relay", "operationId": "create_relay", "parameters": [{"name": "payload", "required": true, "in": "body", "schema": {"$ref": "#/definitions/Relay"}}], "security": [{"Bearer": []}], "tags": ["relay"]}, "get": {"responses": {"401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "200": {"description": "Success", "schema": {"type": "array", "items": {"$ref": "#/definitions/Relay"}}}}, "summary": "List all relays", "operationId": "list_relays", "security": [{"Bearer": []}], "tags": ["relay"]}}, "/relay/{name}": {"parameters": [{"name": "name", "in": "path", "required": true, "type": "string"}], "delete": {"responses": {"404": {"description": "Relay not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Response"}}}, "summary": "Delete the specified relay", "operationId": "delete_relay", "security": [{"Bearer": []}], "tags": ["relay"]}, "patch": {"responses": {"404": {"description": "Relay not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Response"}}}, "summary": "Update the specified relay", "operationId": "update_relay", "parameters": [{"name": "payload", "required": true, "in": "body", "schema": {"$ref": "#/definitions/RelayUpdate"}}], "security": [{"Bearer": []}], "tags": ["relay"]}, "get": {"responses": {"404": {"description": "Relay not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Relay"}}}, "summary": "Look up the specified relay", "operationId": "find_relay", "security": [{"Bearer": []}], "tags": ["relay"]}}, "/token": {"post": {"responses": {"404": {"description": "User not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/TokenPostResponse"}}}, "summary": "Create a new token", "operationId": "create_token", "parameters": [{"name": "payload", "required": true, "in": "body", "schema": {"$ref": "#/definitions/TokenPost"}}], "security": [{"Bearer": []}], "tags": ["token"]}, "get": {"responses": {"401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "200": {"description": "Success", "schema": {"type": "array", "items": {"$ref": "#/definitions/TokenGetResponse"}}}}, "summary": "List all tokens", "operationId": "list_tokens", "security": [{"Bearer": []}], "tags": ["token"]}}, "/token/{token_id}": {"parameters": [{"name": "token_id", "in": "path", "required": true, "type": "string"}], "delete": {"responses": {"404": {"description": "Token not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Response"}}}, "summary": "Delete the specified token", "operationId": "delete_token", "security": [{"Bearer": []}], "tags": ["token"]}, "patch": {"responses": {"404": {"description": "User not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Response"}}}, "summary": "Update the specified token", "operationId": "update_token", "parameters": [{"name": "payload", "required": true, "in": "body", "schema": {"$ref": "#/definitions/TokenPost2"}}], "security": [{"Bearer": []}], "tags": ["token"]}, "get": {"responses": {"404": {"description": "Token not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/TokenGetResponse"}}}, "summary": "Find the specified token", "operationId": "find_token", "security": [{"Bearer": []}], "tags": ["token"]}}, "/tokenuser/{email}": {"parameters": [{"name": "email", "in": "path", "required": true, "type": "string"}], "post": {"responses": {"404": {"description": "User not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/TokenPostResponse"}}}, "summary": "Create a new token for the specified user", "operationId": "create_token", "parameters": [{"name": "payload", "required": true, "in": "body", "schema": {"$ref": "#/definitions/TokenPost2"}}], "security": [{"Bearer": []}], "tags": ["token"]}, "get": {"responses": {"404": {"description": "Token not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/TokenGetResponse"}}}, "summary": "Look up all the tokens of the specified user", "operationId": "find_tokens_of_user", "security": [{"Bearer": []}], "tags": ["token"]}}, "/user": {"post": {"responses": {"409": {"description": "Duplicate user", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Response"}}}, "summary": "Create a new user", "operationId": "create_user", "parameters": [{"name": "payload", "required": true, "in": "body", "schema": {"$ref": "#/definitions/UserCreate"}}], "security": [{"Bearer": []}], "tags": ["user"]}, "get": {"responses": {"401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "200": {"description": "Success", "schema": {"type": "array", "items": {"$ref": "#/definitions/UserGet"}}}}, "summary": "List all users", "operationId": "list_user", "security": [{"Bearer": []}], "tags": ["user"]}}, "/user/{email}": {"parameters": [{"name": "email", "in": "path", "required": true, "type": "string"}], "delete": {"responses": {"404": {"description": "User not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Response"}}}, "summary": "Delete the specified user", "operationId": "delete_user", "security": [{"Bearer": []}], "tags": ["user"]}, "patch": {"responses": {"404": {"description": "User not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/Response"}}}, "summary": "Update the specified user", "operationId": "update_user", "parameters": [{"name": "payload", "required": true, "in": "body", "schema": {"$ref": "#/definitions/UserUpdate"}}], "security": [{"Bearer": []}], "tags": ["user"]}, "get": {"responses": {"404": {"description": "User not found", "schema": {"$ref": "#/definitions/Response"}}, "401": {"description": "Authorization header missing"}, "403": {"description": "Invalid authorization header"}, "400": {"description": "Input validation exception", "schema": {"$ref": "#/definitions/Response"}}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/UserGet"}}}, "summary": "Look up the specified user", "operationId": "find_user", "security": [{"Bearer": []}], "tags": ["user"]}}}, "info": {"title": "Mailu API", "version": "1.0"}, "produces": ["application/json"], "consumes": ["application/json"], "securityDefinitions": {"Bearer": {"type": "apiKey", "in": "header", "name": "Authorization"}}, "security": [{"Bearer": []}], "tags": [{"name": "user", "description": "User operations"}, {"name": "domain", "description": "Domain operations"}, {"name": "alternative", "description": "Alternative operations"}, {"name": "alias", "description": "Alias operations"}, {"name": "relay", "description": "Relay operations"}, {"name": "token", "description": "Token operations"}], "definitions": {"UserCreate": {"required": ["email", "raw_password"], "properties": {"email": {"type": "string", "description": "The email address of the user", "example": "John.Doe@example.com"}, "raw_password": {"type": "string", "description": "The raw (plain text) password of the user. Mailu will hash the password using BCRYPT-SHA256", "example": "secret"}, "comment": {"type": "string", "description": "A description for the user. This description is shown on the Users page", "example": "my comment"}, "quota_bytes": {"type": "integer", "description": "The maximum quota for the user\u2019s email box in bytes", "example": "1000000000"}, "global_admin": {"type": "boolean", "description": "Make the user a global administrator"}, "enabled": {"type": "boolean", "description": "Enable the user. When an user is disabled, the user is unable to login to the Admin GUI or webmail or access his email via IMAP/POP3 or send mail"}, "change_pw_next_login": {"type": "boolean", "description": "Force the user to change their password at next login"}, "enable_imap": {"type": "boolean", "description": "Allow email retrieval via IMAP"}, "enable_pop": {"type": "boolean", "description": "Allow email retrieval via POP3"}, "allow_spoofing": {"type": "boolean", "description": "Allow the user to spoof the sender (send email as anyone)"}, "forward_enabled": {"type": "boolean", "description": "Enable auto forwarding"}, "forward_destination": {"type": "array", "example": "[\"Other@example.com\"]", "items": {"type": "string", "description": "Email address to forward emails to"}}, "forward_keep": {"type": "boolean", "description": "Keep a copy of the forwarded email in the inbox"}, "reply_enabled": {"type": "boolean", "description": "Enable automatic replies. This is also known as out of office (ooo) or out of facility (oof) replies"}, "reply_subject": {"type": "string", "description": "Optional subject for the automatic reply", "example": "Out of office"}, "reply_body": {"type": "string", "description": "The body of the automatic reply email", "example": "Hello, I am out of office. I will respond when I am back."}, "reply_startdate": {"type": "string", "format": "date", "description": "Start date for automatic replies in YYYY-MM-DD format.", "example": "2022-02-10"}, "reply_enddate": {"type": "string", "format": "date", "description": "End date for automatic replies in YYYY-MM-DD format.", "example": "2022-02-22"}, "displayed_name": {"type": "string", "description": "The display name of the user within the Admin GUI", "example": "John Doe"}, "spam_enabled": {"type": "boolean", "description": "Enable the spam filter"}, "spam_mark_as_read": {"type": "boolean", "description": "Enable marking spam mails as read"}, "spam_threshold": {"type": "integer", "description": "The user defined spam filter tolerance", "example": "80"}}, "type": "object"}, "Response": {"properties": {"code": {"type": "integer"}, "message": {"type": "string"}}, "type": "object"}, "UserGet": {"properties": {"email": {"type": "string", "description": "The email address of the user", "example": "John.Doe@example.com"}, "password": {"type": "string", "description": "Hash of the user's password; Example='$bcrypt-sha256$v=2,t=2b,r=12$fmsAdJbYAD1gGQIE5nfJq.$zLkQUEs2XZfTpAEpcix/1k5UTNPm0jO'"}, "comment": {"type": "string", "description": "A description for the user. This description is shown on the Users page", "example": "my comment"}, "quota_bytes": {"type": "integer", "description": "The maximum quota for the user\u2019s email box in bytes", "example": "1000000000"}, "quota_bytes_used": {"type": "integer", "description": "The size of the user\u2019s email box in bytes", "example": "5000000"}, "global_admin": {"type": "boolean", "description": "Make the user a global administrator"}, "enabled": {"type": "boolean", "description": "Enable the user. When an user is disabled, the user is unable to login to the Admin GUI or webmail or access his email via IMAP/POP3 or send mail"}, "change_pw_next_login": {"type": "boolean", "description": "Force the user to change their password at next login"}, "enable_imap": {"type": "boolean", "description": "Allow email retrieval via IMAP"}, "enable_pop": {"type": "boolean", "description": "Allow email retrieval via POP3"}, "allow_spoofing": {"type": "boolean", "description": "Allow the user to spoof the sender (send email as anyone)"}, "forward_enabled": {"type": "boolean", "description": "Enable auto forwarding"}, "forward_destination": {"type": "array", "example": "[\"Other@example.com\"]", "items": {"type": "string", "description": "Email address to forward emails to"}}, "forward_keep": {"type": "boolean", "description": "Keep a copy of the forwarded email in the inbox"}, "reply_enabled": {"type": "boolean", "description": "Enable automatic replies. This is also known as out of office (ooo) or out of facility (oof) replies"}, "reply_subject": {"type": "string", "description": "Optional subject for the automatic reply", "example": "Out of office"}, "reply_body": {"type": "string", "description": "The body of the automatic reply email", "example": "Hello, I am out of office. I will respond when I am back."}, "reply_startdate": {"type": "string", "format": "date", "description": "Start date for automatic replies in YYYY-MM-DD format.", "example": "2022-02-10"}, "reply_enddate": {"type": "string", "format": "date", "description": "End date for automatic replies in YYYY-MM-DD format.", "example": "2022-02-22"}, "displayed_name": {"type": "string", "description": "The display name of the user within the Admin GUI", "example": "John Doe"}, "spam_enabled": {"type": "boolean", "description": "Enable the spam filter"}, "spam_mark_as_read": {"type": "boolean", "description": "Enable marking spam mails as read"}, "spam_threshold": {"type": "integer", "description": "The user defined spam filter tolerance", "example": "80"}}, "type": "object"}, "UserUpdate": {"properties": {"raw_password": {"type": "string", "description": "The raw (plain text) password of the user. Mailu will hash the password using BCRYPT-SHA256", "example": "secret"}, "comment": {"type": "string", "description": "A description for the user. This description is shown on the Users page", "example": "my comment"}, "quota_bytes": {"type": "integer", "description": "The maximum quota for the user\u2019s email box in bytes", "example": "1000000000"}, "global_admin": {"type": "boolean", "description": "Make the user a global administrator"}, "enabled": {"type": "boolean", "description": "Enable the user. When an user is disabled, the user is unable to login to the Admin GUI or webmail or access his email via IMAP/POP3 or send mail"}, "change_pw_next_login": {"type": "boolean", "description": "Force the user to change their password at next login"}, "enable_imap": {"type": "boolean", "description": "Allow email retrieval via IMAP"}, "enable_pop": {"type": "boolean", "description": "Allow email retrieval via POP3"}, "allow_spoofing": {"type": "boolean", "description": "Allow the user to spoof the sender (send email as anyone)"}, "forward_enabled": {"type": "boolean", "description": "Enable auto forwarding"}, "forward_destination": {"type": "array", "example": "[\"Other@example.com\"]", "items": {"type": "string", "description": "Email address to forward emails to"}}, "forward_keep": {"type": "boolean", "description": "Keep a copy of the forwarded email in the inbox"}, "reply_enabled": {"type": "boolean", "description": "Enable automatic replies. This is also known as out of office (ooo) or out of facility (oof) replies"}, "reply_subject": {"type": "string", "description": "Optional subject for the automatic reply", "example": "Out of office"}, "reply_body": {"type": "string", "description": "The body of the automatic reply email", "example": "Hello, I am out of office. I will respond when I am back."}, "reply_startdate": {"type": "string", "format": "date", "description": "Start date for automatic replies in YYYY-MM-DD format.", "example": "2022-02-10"}, "reply_enddate": {"type": "string", "format": "date", "description": "End date for automatic replies in YYYY-MM-DD format.", "example": "2022-02-22"}, "displayed_name": {"type": "string", "description": "The display name of the user within the Admin GUI", "example": "John Doe"}, "spam_enabled": {"type": "boolean", "description": "Enable the spam filter"}, "spam_mark_as_read": {"type": "boolean", "description": "Enable marking spam mails as read"}, "spam_threshold": {"type": "integer", "description": "The user defined spam filter tolerance", "example": "80"}}, "type": "object"}, "Domain": {"required": ["name"], "properties": {"name": {"type": "string", "description": "FQDN (e.g. example.com)", "example": "example.com"}, "comment": {"type": "string", "description": "a comment"}, "max_users": {"type": "integer", "description": "maximum number of users", "default": -1, "minimum": -1}, "max_aliases": {"type": "integer", "description": "maximum number of aliases", "default": -1, "minimum": -1}, "max_quota_bytes": {"type": "integer", "description": "maximum quota for mailbox", "minimum": 0}, "signup_enabled": {"type": "boolean", "description": "allow signup"}, "alternatives": {"type": "array", "example": "[\"example.com\"]", "items": {"type": "string", "description": "FQDN"}}}, "type": "object"}, "DomainGet": {"required": ["name"], "properties": {"name": {"type": "string", "description": "FQDN (e.g. example.com)", "example": "example.com"}, "comment": {"type": "string", "description": "a comment"}, "managers": {"type": "array", "items": {"type": "string", "description": "manager of domain"}}, "max_users": {"type": "integer", "description": "maximum number of users", "default": -1, "minimum": -1}, "max_aliases": {"type": "integer", "description": "maximum number of aliases", "default": -1, "minimum": -1}, "max_quota_bytes": {"type": "integer", "description": "maximum quota for mailbox", "minimum": 0}, "signup_enabled": {"type": "boolean", "description": "allow signup"}, "alternatives": {"type": "array", "example": "[\"example.com\"]", "items": {"type": "string", "description": "FQDN"}}, "dns_autoconfig": {"type": "array", "items": {"type": "string", "description": "DNS client auto-configuration entry"}}, "dns_mx": {"type": "string"}, "dns_spf": {"type": "string"}, "dns_dkim": {"type": "string"}, "dns_dmarc": {"type": "string"}, "dns_dmarc_report": {"type": "string"}, "dns_tlsa": {"type": "array", "items": {"type": "string"}}}, "type": "object"}, "DomainUpdate": {"properties": {"comment": {"type": "string", "description": "a comment"}, "max_users": {"type": "integer", "description": "maximum number of users", "default": -1, "minimum": -1}, "max_aliases": {"type": "integer", "description": "maximum number of aliases", "default": -1, "minimum": -1}, "max_quota_bytes": {"type": "integer", "description": "maximum quota for mailbox", "minimum": 0}, "signup_enabled": {"type": "boolean", "description": "allow signup"}, "alternatives": {"type": "array", "example": "[\"example.com\"]", "items": {"type": "string", "description": "FQDN"}}}, "type": "object"}, "ManagerCreate": {"required": ["user_email"], "properties": {"user_email": {"type": "string", "description": "email address of manager"}}, "type": "object"}, "Manager": {"properties": {"managers": {"type": "array", "items": {"type": "string", "description": "manager of domain"}}}, "type": "object"}, "AlternativeDomain": {"required": ["domain", "name"], "properties": {"name": {"type": "string", "description": "alternative FQDN", "example": "example2.com"}, "domain": {"type": "string", "description": "domain FQDN", "example": "example.com"}}, "type": "object"}, "Alias": {"allOf": [{"$ref": "#/definitions/AliasUpdate"}, {"required": ["email"], "properties": {"email": {"type": "string", "description": "the alias email address", "example": "user@example.com"}, "destination": {"type": "array", "items": {"type": "string", "description": "destination email address", "example": "user@example.com"}}}, "type": "object"}]}, "AliasUpdate": {"properties": {"comment": {"type": "string", "description": "a comment"}, "destination": {"type": "array", "items": {"type": "string", "description": "alias email address", "example": "user@example.com"}}, "wildcard": {"type": "boolean", "description": "enable SQL Like wildcard syntax"}}, "type": "object"}, "Relay": {"required": ["name"], "properties": {"name": {"type": "string", "description": "relayed domain name", "example": "example.com"}, "smtp": {"type": "string", "description": "remote host", "example": "example.com"}, "comment": {"type": "string", "description": "a comment"}}, "type": "object"}, "RelayUpdate": {"properties": {"smtp": {"type": "string", "description": "remote host", "example": "example.com"}, "comment": {"type": "string", "description": "a comment"}}, "type": "object"}, "TokenPost": {"required": ["email"], "properties": {"email": {"type": "string", "description": "The email address of the user", "example": "John.Doe@example.com"}, "comment": {"type": "string", "description": "A description for the token. This description is shown on the Authentication tokens page", "example": "my comment"}, "AuthorizedIP": {"type": "array", "items": {"type": "string", "description": "White listed IP addresses or networks that may use this token.", "example": "203.0.113.0/24"}}}, "type": "object"}, "TokenPostResponse": {"properties": {"id": {"type": "string", "description": "The record id of the token (unique identifier)", "example": "1"}, "token": {"type": "string", "description": "The created authentication token for the user.", "example": "2caf6607de5129e4748a2c061aee56f2"}, "email": {"type": "string", "description": "The email address of the user", "example": "John.Doe@example.com"}, "comment": {"type": "string", "description": "A description for the token. This description is shown on the Authentication tokens page", "example": "my comment"}, "AuthorizedIP": {"type": "array", "items": {"type": "string", "description": "White listed IP addresses or networks that may use this token.", "example": "203.0.113.0/24"}}, "Created": {"type": "string", "description": "The date when the token was created", "example": "John.Doe@example.com"}}, "type": "object"}, "TokenGetResponse": {"properties": {"id": {"type": "string", "description": "The record id of the token (unique identifier)", "example": "1"}, "email": {"type": "string", "description": "The email address of the user", "example": "John.Doe@example.com"}, "comment": {"type": "string", "description": "A description for the token. This description is shown on the Authentication tokens page", "example": "my comment"}, "AuthorizedIP": {"type": "array", "items": {"type": "string", "description": "White listed IP addresses or networks that may use this token.", "example": "203.0.113.0/24"}}, "Created": {"type": "string", "description": "The date when the token was created", "example": "John.Doe@example.com"}, "Last edit": {"type": "string", "description": "The date when the token was last modifified", "example": "John.Doe@example.com"}}, "type": "object"}, "TokenPost2": {"properties": {"comment": {"type": "string", "description": "A description for the token. This description is shown on the Authentication tokens page", "example": "my comment"}, "AuthorizedIP": {"type": "array", "items": {"type": "string", "description": "White listed IP addresses or networks that may use this token.", "example": "203.0.113.0/24"}}}, "type": "object"}}, "responses": {"ParseError": {"description": "When a mask can't be parsed"}, "MaskError": {"description": "When any error occurs on mask"}}}