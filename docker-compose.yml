version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: mailu_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-mailu_codes}
      MYSQL_USER: ${MYSQL_USER:-mailu_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-mailu_password}
      TZ: Asia/Shanghai
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
    networks:
      - mailu_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: mailu_redis
    restart: unless-stopped
    environment:
      TZ: Asia/Shanghai
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - mailu_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # FastAPI后端应用
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: mailu_backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=mysql+pymysql://${MYSQL_USER:-mailu_user}:${MYSQL_PASSWORD:-mailu_password}@mysql:3306/${MYSQL_DATABASE:-mailu_codes}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=${REDIS_DB:-0}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - API_URL=${API_URL}
      - API_TOKEN=${API_TOKEN}
      - DEFAULT_DOMAIN=${DEFAULT_DOMAIN:-example.com}
      - ALLOWED_DOMAINS=${ALLOWED_DOMAINS:-}
      - IMAP_SERVER=${IMAP_SERVER}
      - IMAP_PORT=${IMAP_PORT:-993}
      - IMAP_USE_SSL=${IMAP_USE_SSL:-true}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT:-25}
      - TZ=Asia/Shanghai
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app/backend
      - ./frontend:/app/frontend
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mailu_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: mailu_celery_worker
    restart: unless-stopped
    environment:
      - DATABASE_URL=mysql+pymysql://${MYSQL_USER:-mailu_user}:${MYSQL_PASSWORD:-mailu_password}@mysql:3306/${MYSQL_DATABASE:-mailu_codes}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=${REDIS_DB:-0}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - API_URL=${API_URL}
      - API_TOKEN=${API_TOKEN}
      - DEFAULT_DOMAIN=${DEFAULT_DOMAIN:-example.com}
      - ALLOWED_DOMAINS=${ALLOWED_DOMAINS:-}
      - IMAP_SERVER=${IMAP_SERVER}
      - IMAP_PORT=${IMAP_PORT:-993}
      - IMAP_USE_SSL=${IMAP_USE_SSL:-true}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT:-25}
      - TZ=Asia/Shanghai
    volumes:
      - ./backend:/app/backend
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - mailu_network
    command: celery -A backend.app.celery worker --loglevel=info --concurrency=4 -Q email_check,code_extract,celery

  # Celery Beat (定时任务)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: mailu_celery_beat
    restart: unless-stopped
    environment:
      - DATABASE_URL=mysql+pymysql://${MYSQL_USER:-mailu_user}:${MYSQL_PASSWORD:-mailu_password}@mysql:3306/${MYSQL_DATABASE:-mailu_codes}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=${REDIS_DB:-0}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - API_URL=${API_URL}
      - API_TOKEN=${API_TOKEN}
      - DEFAULT_DOMAIN=${DEFAULT_DOMAIN:-example.com}
      - ALLOWED_DOMAINS=${ALLOWED_DOMAINS:-}
      - IMAP_SERVER=${IMAP_SERVER}
      - IMAP_PORT=${IMAP_PORT:-993}
      - IMAP_USE_SSL=${IMAP_USE_SSL:-true}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT:-25}
      - TZ=Asia/Shanghai
    volumes:
      - ./backend:/app/backend
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mailu_network
    command: celery -A backend.app.celery beat --loglevel=info

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: mailu_nginx
    restart: unless-stopped
    environment:
      TZ: Asia/Shanghai
    ports:
      - "30001:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/static:ro
      - ./frontend:/var/www/frontend:ro
    depends_on:
      - backend
    networks:
      - mailu_network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  mailu_network:
    driver: bridge
